#include <stdio.h>
#include <string.h>
#include <stdint.h>

#define MAX_QUEUE_SIZE 30

 
void enqueue (uint8_t x[]);
uint8_t * dequeue (uint8_t element[]);
void display_queue (void);

struct queue 
{
    uint8_t Q_Counter;
    uint8_t * front;
    uint8_t * rear;
    uint8_t receivedBytes[30];
} rxPacketsQ;


void enqueue (uint8_t x[]) {
  
    if (rxPacketsQ.Q_Counter != MAX_QUEUE_SIZE){
      
        for (int i=0; i < 3; i++){
        
            *(rxPacketsQ.rear + i) = x[i];
	    } 
 
        rxPacketsQ.rear = rxPacketsQ.receivedBytes + (rxPacketsQ.rear - rxPacketsQ.receivedBytes + 3) % MAX_QUEUE_SIZE;
      
 
        rxPacketsQ.Q_Counter += 3;
    
    }
    else{
    
        printf ("Queue is full\n");
      
        return;
    }
}


 
uint8_t *dequeue (uint8_t element[]){

    if (rxPacketsQ.Q_Counter == 0){
      
        printf ("Queue is empty\n");
        return;
    }
    else{
    
        for (int i = 0; i < 3; i++){
            
            element[i] = *(rxPacketsQ.front + i);
	        *(rxPacketsQ.front + i) = 0;
	    } 
 
        rxPacketsQ.front = rxPacketsQ.receivedBytes + (rxPacketsQ.front - rxPacketsQ.receivedBytes + 3) % MAX_QUEUE_SIZE;
        rxPacketsQ.Q_Counter -= 3;
        return element;
        
    }
 
}


void display_queue (void){
  
    printf ("elements: ");
  
    for (int i = 0; i < MAX_QUEUE_SIZE; i++){
      
        printf ("%u ", rxPacketsQ.receivedBytes[i]);
    } 
    printf ("\n");
} 
 
int main (){
    
    uint8_t a[3]={0};
    uint8_t b[3]={0};
    uint8_t* temp =a;
    memset (rxPacketsQ.receivedBytes, 0, 30);

    rxPacketsQ.front = rxPacketsQ.receivedBytes;
    rxPacketsQ.rear = rxPacketsQ.receivedBytes;
    display_queue ();
    
    b[0]=1;
    b[1]=2;
    b[2]=3;
    enqueue (b);
    
    b[0]=4;
    b[1]=5;
    b[2]=6;
    enqueue (b);

    display_queue ();

    temp = dequeue (a);
    printf("dequeued elements: ");
    for(int i=0;i<3;i++){
        printf ("%u ", a[i]);
    }
    printf("\n");

    temp = dequeue (a);
    printf("dequeued elements: ");
    for(int i=0;i<3;i++){
        printf ("%u ", a[i]);
    }
    printf("\n");
  
    b[0]=7;
    b[1]=8;
    b[2]=9;  
    enqueue (b);
 
    display_queue ();

    temp = dequeue (a);
    printf("dequeued elements: ");
    for(int i=0;i<3;i++){
        printf ("%u ", a[i]);
    }
    printf("\n");
    return 0;
}
